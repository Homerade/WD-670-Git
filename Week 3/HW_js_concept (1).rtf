{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 In looking at variables in Javascript, you will note that there are different types of variables. Here we will be looking at global versus local variables. Any variable created inside of a function is considered local and applies only to that function. \
\
var eg1 = function ( ) \{\
	var run = 20\
	\};\
eg1();\
console.log(run);\
// \'97> 20\
\
Therefore, \'93var run\'94 can be used again within a different function and produce a different result based on the terms in the body of the new function because it is only meaningful to the application of the function it is in.\
\
var eg2 = function ( ) \{\
	var run = 30\
\};\
eg2();\
console.log(run);\
// \'97> 30\
\
Conversely, if a variable is defined outside of a function it is know as global and will be applied to all of your script, even if you try to use it anew in a function.\
\
var run = 10;\
\
var eg3 = function ( ) \{\
	var run = 20\
\};\
eg3();\
console.log(run);\
// \'97> 10\
\
If you did want to redefine a global variable for use just inside a particular function, you would not define it as a new variable using the \'93var __ = \'93 expression but rather by redefining it using just the variable name. Done as such, it is recognized that the variable is being changed just in this one instance.\
\
var run = 10\
\
var eg4 = function ( ) \{\
	run = 20\
\};\
eg4();\
console.log(run);\
// \'97> 20\
\
\
}